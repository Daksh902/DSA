You are given the starting 'l' and the ending 'r' positions of the array 'ARR'.


You must sort the elements between 'l' and 'r'.


Note:
Change in the input array itself. So no need to return or print anything.
Example:
Input: ‘N’ = 7,
'ARR' = [2, 13, 4, 1, 3, 6, 28]

Output: [1 2 3 4 6 13 28]

Explanation: After applying 'merge sort' on the input array, the output is [1 2 3 4 6 13 28].
Input format :
The first line contains an integer <em>**'N'**</em> representing the size of the array/list.

The second line contains 'N' single space-separated integers representing the elements in the array/list.
Output format :
You don't need to return anything. In the output, you will see the array after you do the modification.




public class Solution {

    public static void mergeSort(int[] arr, int l, int r){
        // Write your code here
            if (l < r) {
            int mid = (l + r) / 2;
            mergeSort(arr, l, mid); // Sort left half
            mergeSort(arr, mid + 1, r); // Sort right half
            merge(arr, l, mid, r); // Merge sorted halves
        }
    }

    public static void merge(int[] arr, int l, int mid, int r) {
        int leftLength = mid - l + 1;
        int rightLength = r - mid;
        int[] leftArr = new int[leftLength];
        int[] rightArr = new int[rightLength];

        for (int i = 0; i < leftLength; i++) {
            leftArr[i] = arr[l + i];
        }
        for (int j = 0; j < rightLength; j++) {
            rightArr[j] = arr[mid + 1 + j];
        }

        int i = 0, j = 0, k = l;
        while (i < leftLength && j < rightLength) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k] = leftArr[i];
                i++;
            } else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }

        while (i < leftLength) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }

        while (j < rightLength) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }

    }
}
