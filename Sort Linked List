/*
Given a linked list of 'N' nodes, which has nodes in alternating non-decreasing and non-increasing. Sort the list in non-decreasing order.


For Example:
If given linked list is 1->9->3->8->4 then it should be modified to 1->3->4->8->9.


Input Format :
The first line contains an integer 'N', the size of the linked list.
The second line contains 'N' space-separated integers in alternating ascending and descending orders.


Output Format :
The output contains all the integers in non-decreasing order.


Note :
You are not required to print the output, it has already been taken care of. Just implement the function.
*/



/****************************************************************

 Following is the class structure of the Node class:

 class Node {
     public int data;
     public Node next;

     Node()
     {
         this.data = 0;
         this.next = null;
     }
     Node(int data)
     {
         this.data = data;
         this.next = null;
     }
     Node(int data, Node next)
     {
         this.data = data;
         this.next = next;
     }
 }

 *****************************************************************/

public class Solution {
    public static Node sortList(Node head) {
        //Write your code here
         if (head == null || head.next == null) {
            return head;
        }

        // Split the original linked list into two separate lists
        Node evenHead = new Node(0);
        Node evenTail = evenHead;
        Node oddHead = new Node(0);
        Node oddTail = oddHead;
        boolean isEven = true;

        while (head != null) {
            if (isEven) {
                evenTail.next = head;
                evenTail = evenTail.next;
            } else {
                oddTail.next = head;
                oddTail = oddTail.next;
            }

            isEven = !isEven;
            head = head.next;
        }

        evenTail.next = null;
        oddTail.next = null;

        // Reverse the odd list
        Node reversedOddHead = reverseList(oddHead.next);

        // Merge the two sorted lists
        return mergeLists(evenHead.next, reversedOddHead);
    }

    private static Node reverseList(Node head) {
        Node prev = null;
        Node current = head;

        while (current != null) {
            Node nextNode = current.next;
            current.next = prev;
            prev = current;
            current = nextNode;
        }

        return prev;
    }

    private static Node mergeLists(Node l1, Node l2) {
        Node dummy = new Node(0);
        Node tail = dummy;

        while (l1 != null && l2 != null) {
            if (l1.data <= l2.data) {
                tail.next = l1;
                l1 = l1.next;
            } else {
                tail.next = l2;
                l2 = l2.next;
            }
            tail = tail.next;
        }

        if (l1 != null) {
            tail.next = l1;
        }

        if (l2 != null) {
            tail.next = l2;
        }

        return dummy.next;
    }
}
