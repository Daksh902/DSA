/*
Given an integer array A of size N, check if the input array can be divided in two groups G1 and G2 with following properties-
- Sum of both group elements are equal
- Group 1: All elements in the input, which are divisible by 5 
- Group 2: All elements in the input, which are divisible by 3 (but not divisible by 5). 
- Elements which are neither divisible by 5 nor by 3, can be put in either group G1 or G2 to satisfy the equal sum property. 
Group 1 and Group 2 are allowed to be unordered and all the elements in the Array A must belong to only one of the groups.


Return true, if array can be split according to the above rules, else return false.
Note: You will get marks only if all the test cases are passed.
Input Format :
Line 1 : Integer N (size of array)
Line 2 : Array A elements (separated by space)
Output Format :
true or false
Constraints :
1 <= N <= 50
*/



public class solution {

	public static boolean splitArray(int input[]) {
	   	return splitArray(input,0,0,0);
	}
    
     public static boolean splitArray(int arr[], int si, int lsum, int rsum) 
	{ 
         
    	if (si == arr.length) 
        {
            return lsum == rsum;
        }
         
    	if (arr[si] % 5 == 0)
        {
            lsum += arr[si];
        }
        else if (arr[si] % 3 == 0) 
        {
            rsum += arr[si]; 
        }
        else
        {
            return splitArray(arr,si+1, lsum+arr[si], rsum)  || splitArray(arr,si+1,lsum,rsum+arr[si]);
        }
         
    	return splitArray(arr,si+1,lsum,rsum); 
		
	}
	

}
